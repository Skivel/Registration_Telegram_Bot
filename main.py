import logging
import re
import requests
import json

import settings

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = settings.BOT_TOKEN
CREATE_USER_URL = settings.SITE_URL + 'user/create'
SITE_URL = settings.SITE_URL
TELEGRAM_USER_INFO = {}
USER_PHOTO_PATH = ''

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserForm(StatesGroup):
    email = State()
    password = State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """
    –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ /start
    """

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—è
    TELEGRAM_USER_INFO.update({'name': message.from_user.full_name})
    TELEGRAM_USER_INFO.update({'nickname': message.from_user.username})
    user_photo = await message.from_user.get_profile_photos(limit=1)

    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {TELEGRAM_USER_INFO.get('name')}! \n–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π E-mail:")

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Ö–æ—á –æ–¥–Ω–µ —Ñ–æ—Ç–æ
    if user_photo.total_count > 0:
        # –û—Ç—Ä–∏–º—É—î–º–æ file id –ø–µ—Ä—â–æ—ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é
        file_id = user_photo.photos[0][-1].file_id

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é
        photo = await bot.get_file(file_id)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        await photo.download(destination_dir=f'media/users/{TELEGRAM_USER_INFO.get("nickname")}')
        global USER_PHOTO_PATH
        USER_PHOTO_PATH = f'media/users/{TELEGRAM_USER_INFO.get("nickname")}/{photo.file_path}'
    else:
        USER_PHOTO_PATH = ''

    await UserForm.email.set()


@dp.message_handler(state=UserForm.email)
async def process_email(message: types.Message, state: FSMContext):
    """
    –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ e-mail –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    """

    # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–≤–µ–¥–µ–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤–∏—Ä–∞–∑—É
    if not re.match(pattern, message.text):
        return False

    TELEGRAM_USER_INFO.update({'email': message.text})

    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
    await UserForm.next()


@dp.message_handler(state=UserForm.password)
async def process_password(message: types.Message, state: FSMContext):
    """
    –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –ø–∞—Ä–æ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—è
    """

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É
    if len(message.text) < 8:
        await message.answer("üõë –ù–µ–±–µ–∑–ø–µ–∫–∞ üõë –ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 8-–º–∏ —Å–∏–º–≤–æ–ª—ñ–≤")
        await message.answer("–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü–∏—Ñ—Ä
    if not re.search(r'\d', message.text):
        await message.answer("üõë –ù–µ–±–µ–∑–ø–µ–∫–∞ üõë –ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± 1 —Ü–∏—Ñ—Ä—É")
        await message.answer("–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∞ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤
    if not re.search(r'[A-Z]', message.text) or not re.search(r'[a-z]', message.text):
        await message.answer(
            "üõë –ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å üõë\n–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± 1 –±—É–∫–≤—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∞ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ—î—Å—Ç—Ä—É (–ê-–∞)")
        await message.answer("–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    if not re.search(r'[!@#$%^&*()_+]', message.text):
        await message.answer("üõë –ù–µ–±–µ–∑–ø–µ–∫–∞ üõë –ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± 1 —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª (!@#$%^&*()_+)")
        await message.answer("–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
        return False

    TELEGRAM_USER_INFO.update({'password': message.text})

    await message.answer(
        f"–í—ñ—Ç–∞—é, {TELEGRAM_USER_INFO.get('name')}!\n–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å ‚úÖ \n–ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —É–≤—ñ–π—Ç–∏ —É —Å–≤—ñ–π "
        f"–ø—Ä–æ—Ñ—ñ–ª—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–ºüëá \n{SITE_URL}\nLogin: {TELEGRAM_USER_INFO.get('nickname')}\nPassword: "
        f"{TELEGRAM_USER_INFO.get('password')}")
    if USER_PHOTO_PATH == '':
        response = requests.post(CREATE_USER_URL, data=json.dumps(TELEGRAM_USER_INFO),
                                 headers={'Content-Type': 'application/json'})
    else:
        headers = {'Content-Type': 'application/json'}
        data = json.dumps(TELEGRAM_USER_INFO)
        print(f'TEST {data}')
        files = {'image': open(USER_PHOTO_PATH, 'rb')}
        response = requests.post(CREATE_USER_URL, data=json.loads(data), files=files)
        print(response.status_code)
        print(response.json)

    await state.finish()
    return response.status_code


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
